import ucs from './ucs.json'
import profs from './profs.json'
import alunos from './alunos.json'
import fs from 'fs'

// Build prop
let prop_to_ttl = (prop) => {
    let ttlprop = `    :${prop[0]} `

    if (Array.isArray(prop[1])){ //Handle list of same props
        prop[1].forEach((v,i) =>{
            if(i != prop[1].length-1)
                ttlprop += `${v} ,\n    ${' '.repeat(prop[0].length+1)} `
            else
                ttlprop += `${v} `
        })
    } else {
        ttlprop += `${prop[1]} ` //handle individual prop
    }

    return ttlprop;
}

let json_to_ttl = (obj) => {
    let ttl = `###  http://www.di.uminho.pt/prc2021/uc#${obj.id}\n`; //Set iri

    ttl = ttl + (
        `${obj.id} rdf:type owl:NamedIndividual ,\n        ${obj.class} ;\n` // Individuals and class
    )

    delete obj.class
    delete obj.id

    Object.entries(obj).forEach((el,i,arr) => { // Add props
        ttl = ttl + prop_to_ttl(el)
        
        if(i == arr.length-1) // Check if is last prop
            ttl += '.\n'
        else
            ttl += ';\n'
        
    })

    ttl += '\n' // Just to add space between individuals

    console.log(ttl)

    return ttl;
}


// Write ontologia

var logStream = fs.createWriteStream('../ontologias/tpc.ttl', { flags: 'a' });

ucs.forEach(element => {
    logStream.write(json_to_ttl(element))
})

profs.forEach(element => {
    logStream.write(json_to_ttl(element))
})

alunos.forEach(element => {
    logStream.write(json_to_ttl(element))
})

logStream.end("###  Generated by the OWL API(version 4.5.9.2019 - 02 - 01T07: 24: 44Z) https://github.com/owlcs/owlapi")